"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClient = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
class RedisClient {
    constructor(connectionOptions) {
        if (typeof connectionOptions === 'string') {
            // Conexão via URL
            this.client = new ioredis_1.default(connectionOptions);
            this.subscriber = new ioredis_1.default(connectionOptions);
        }
        else {
            // Conexão via objeto de opções
            this.client = new ioredis_1.default(connectionOptions);
            this.subscriber = new ioredis_1.default(connectionOptions);
        }
    }
    // Recursos padrão: GET e SET
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.get(key);
        });
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.set(key, value);
        });
    }
    close() {
        this.client.disconnect();
        this.subscriber.disconnect();
    }
}
exports.RedisClient = RedisClient;
