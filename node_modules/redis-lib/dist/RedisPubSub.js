"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisPubSub = void 0;
class RedisPubSub {
    constructor(redis) {
        this.handlers = new Map();
        this.redis = redis;
    }
    // Subscreve em uma sala
    subscribe(room, handler) {
        this.handlers.set(room, handler);
        this.redis.subscriber.subscribe(room, (err, count) => {
            if (err)
                console.error(`Error subscribing to ${room}:`, err);
            else
                console.log(`Subscribed to ${room}, ${count} channels.`);
        });
        this.redis.subscriber.on('message', (channel, message) => {
            if (this.handlers.has(channel)) {
                this.handlers.get(channel)(channel, message);
            }
        });
    }
    // Publica uma mensagem em uma sala
    publish(room, data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.redis.client.publish(room, data);
        });
    }
}
exports.RedisPubSub = RedisPubSub;
