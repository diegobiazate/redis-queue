"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterStrategy = void 0;
class ClusterStrategy {
    constructor(redis, room) {
        this.redis = redis;
        this.room = room;
    }
    // Todos os workers processam os dados
    publishToAll(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.redis.client.publish(this.room, data);
        });
    }
    // Apenas um worker processa os dados (usando uma chave de lock no Redis)
    publishToOne(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const lockKey = `lock:${this.room}`;
            const lock = yield this.redis.client.set(lockKey, 'locked', 'EX', 5, 'NX');
            if (lock) {
                yield this.redis.client.publish(this.room, data);
            }
            else {
                console.log('Lock already held by another worker');
            }
        });
    }
}
exports.ClusterStrategy = ClusterStrategy;
